
Two parts:
================================================================
MAIN APPLICATION

* Window
* Input
* Timer
* MemoryStore [all cross-frame preserved state goes here!]
	- should it be just blob memory?
	- should it be versioned?
	- should it be key:value store?
		+ more resitent to changes
		+ could be modified by gui
		+ gui could automatically display values (e.g. starting with GUI_*)
	- should it be serialized to a file and loaded on application startup?
* Gui
	- it should be automated - tile based texture rendering?
	- MemoryStore annotations / naming convensions?
* Camera				[CameraState => MemoryStore]
* Graphics helpers
	- shaders			[reloaded on change]
	- textures			[reloaded on change]
	- fonts
	- models			[reloaded on change]
	- debug rendering
	- errors handling	[opengl errors, shaders/textures/models errors]

================================================================
DYNAMIC LIBRARY - reloaded on the fly (when code changes)

* Logic:
	- Update
	- Render




Q: What is a scene?
A: MemoryStore with Logic(Update, Render)
	- a directory, with file *scene.h* and *memorystore*
	- so you could event switch between scenes from main app
		
